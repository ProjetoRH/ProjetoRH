<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/application/controller/FuncionarioController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/application/controller/FuncionarioController.java" />
              <option name="originalContent" value="package application.controller;&#10;&#10;import application.dto.funcionario.*;&#10;import application.service.CargoService;&#10;import application.service.FuncionarioService;&#10;import application.service.UsuarioService;&#10;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class FuncionarioController {&#10;&#10;    private final UsuarioService usuarioService;&#10;    private final CargoService cargoService;&#10;    private final FuncionarioService funcionarioService;&#10;&#10;    public FuncionarioController(UsuarioService usuarioService,&#10;                                 CargoService cargoService,&#10;                                 FuncionarioService funcionarioService) {&#10;&#10;        this.usuarioService = usuarioService;&#10;        this.cargoService = cargoService;&#10;        this.funcionarioService = funcionarioService;&#10;    }&#10;&#10;&#10;    public CadastrarFuncionarioResponse cadastrarFuncionario(FuncionarioControllerRequest request) throws SQLException {&#10;&#10;        return funcionarioService.cadastrarFuncionario(request);&#10;    }&#10;&#10;    public List&lt;ListarTodosFuncionarioResponse&gt; listarTodosFuncionarios() {&#10;        return funcionarioService.listarTodosFuncionarios();&#10;    }&#10;&#10;    public ExcluirFuncionariosResponse excluirFuncionario(ExcluirFuncionarioRequest request) {&#10;        return funcionarioService.excluirFuncionario(request);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package application.controller;&#10;&#10;import application.dto.funcionario.*;&#10;import application.dto.curso.ListarMeusCursosResponse;&#10;import application.dto.curso.DetalheCursoResponse;&#10;import application.service.CargoService;&#10;import application.service.FuncionarioService;&#10;import application.service.UsuarioService;&#10;import application.service.InscricaoService;&#10;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class FuncionarioController {&#10;&#10;    private final UsuarioService usuarioService;&#10;    private final CargoService cargoService;&#10;    private final FuncionarioService funcionarioService;&#10;    private final InscricaoService inscricaoService;&#10;&#10;    public FuncionarioController(UsuarioService usuarioService,&#10;                                 CargoService cargoService,&#10;                                 FuncionarioService funcionarioService,&#10;                                 InscricaoService inscricaoService) {&#10;&#10;        this.usuarioService = usuarioService;&#10;        this.cargoService = cargoService;&#10;        this.funcionarioService = funcionarioService;&#10;        this.inscricaoService = inscricaoService;&#10;    }&#10;&#10;&#10;    public CadastrarFuncionarioResponse cadastrarFuncionario(FuncionarioControllerRequest request) throws SQLException {&#10;&#10;        return funcionarioService.cadastrarFuncionario(request);&#10;    }&#10;&#10;    public List&lt;ListarTodosFuncionarioResponse&gt; listarTodosFuncionarios() {&#10;        return funcionarioService.listarTodosFuncionarios();&#10;    }&#10;&#10;    public ExcluirFuncionariosResponse excluirFuncionario(ExcluirFuncionarioRequest request) {&#10;        return funcionarioService.excluirFuncionario(request);&#10;    }&#10;&#10;    // Lista os cursos do funcionário (retorna DTOs de resposta)&#10;    public List&lt;ListarMeusCursosResponse&gt; listarMeusCursos(int idFuncionario) throws SQLException {&#10;        return inscricaoService.listarCursosDoFuncionario(idFuncionario);&#10;    }&#10;&#10;    // Retorna detalhe de um curso para o funcionário&#10;    public DetalheCursoResponse detalharCurso(int idFuncionario, int idCurso) throws SQLException {&#10;        return inscricaoService.consultarDetalheCurso(idFuncionario, idCurso);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/application/dto/curso/CursoDetalheDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/application/dto/curso/CursoDetalheDTO.java" />
              <option name="updatedContent" value="package application.dto.curso;&#10;&#10;public class CursoDetalheDTO {&#10;    private final int idCurso;&#10;    private final String nomeCurso;&#10;    private final String descricaoCompleta;&#10;    private final String statusPessoal;&#10;    private final String statusGeral;&#10;&#10;    public CursoDetalheDTO(int idCurso, String nomeCurso, String descricaoCompleta, String statusPessoal, String statusGeral) {&#10;        this.idCurso = idCurso;&#10;        this.nomeCurso = nomeCurso;&#10;        this.descricaoCompleta = descricaoCompleta;&#10;        this.statusPessoal = statusPessoal;&#10;        this.statusGeral = statusGeral;&#10;    }&#10;&#10;    public int getIdCurso() {&#10;        return idCurso;&#10;    }&#10;&#10;    public String getNomeCurso() {&#10;        return nomeCurso;&#10;    }&#10;&#10;    public String getDescricaoCompleta() {&#10;        return descricaoCompleta;&#10;    }&#10;&#10;    public String getStatusPessoal() {&#10;        return statusPessoal;&#10;    }&#10;&#10;    public String getStatusGeral() {&#10;        return statusGeral;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/domain/model/valueobjects/TelefoneInvalidoException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/domain/model/valueobjects/TelefoneInvalidoException.java" />
              <option name="updatedContent" value="package domain.model.valueobjects;&#10;&#10;public class TelefoneInvalidoException extends RuntimeException {&#10;    public TelefoneInvalidoException(String mensagem) {&#10;        super(mensagem);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/TesteCadastroFuncionario.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/TesteCadastroFuncionario.java" />
              <option name="updatedContent" value="package test;&#10;&#10;import application.service.FuncionarioService;&#10;import domain.model.Funcionario;&#10;import domain.model.valueobjects.Email;&#10;import domain.model.valueobjects.Telefone;&#10;import domain.repository.CargoRepository;&#10;import domain.repository.FuncionarioRepository;&#10;import infrastructure.persistence.CargoRepositoryImpl;&#10;import infrastructure.persistence.FuncionarioRepositoryImpl;&#10;&#10;public class TesteCadastroFuncionario {&#10;    public static void main(String[] args) {&#10;        FuncionarioRepository funcionarioRepository = new FuncionarioRepositoryImpl();&#10;        CargoRepository cargoRepository = new CargoRepositoryImpl();&#10;        FuncionarioService service = new FuncionarioService(funcionarioRepository, cargoRepository);&#10;&#10;        Funcionario funcionario = new Funcionario(&#10;                &quot;João Silva&quot;,&#10;                new Email(&quot;joao.silva@email.com&quot;),&#10;                new Telefone(&quot;11999999999&quot;),&#10;                &quot;Analista&quot;,&#10;                &quot;TI&quot;&#10;        );&#10;&#10;        try {&#10;            service.cadastrarFuncionario(funcionario);&#10;            System.out.println(&quot;Funcionário cadastrado com sucesso!&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Erro ao cadastrar funcionário: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>